"""autogenerated by genpy from obj_rec/Percept.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Percept(genpy.Message):
  _md5sum = "802aabdc6fb055ed6391c1db38541fd3"
  _type = "obj_rec/Percept"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 id
uint16 u
uint16 v
uint16 width
uint16 height
uint16 area

"""
  __slots__ = ['id','u','v','width','height','area']
  _slot_types = ['uint8','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,u,v,width,height,area

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Percept, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.u is None:
        self.u = 0
      if self.v is None:
        self.v = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.area is None:
        self.area = 0
    else:
      self.id = 0
      self.u = 0
      self.v = 0
      self.width = 0
      self.height = 0
      self.area = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B5H.pack(_x.id, _x.u, _x.v, _x.width, _x.height, _x.area))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.id, _x.u, _x.v, _x.width, _x.height, _x.area,) = _struct_B5H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B5H.pack(_x.id, _x.u, _x.v, _x.width, _x.height, _x.area))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.id, _x.u, _x.v, _x.width, _x.height, _x.area,) = _struct_B5H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B5H = struct.Struct("<B5H")
