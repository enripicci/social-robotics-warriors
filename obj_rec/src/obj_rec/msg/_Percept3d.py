"""autogenerated by genpy from obj_rec/Percept3d.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import obj_rec.msg

class Percept3d(genpy.Message):
  _md5sum = "7b8efd7cdbb88bb5a200b08a3ce4ba3c"
  _type = "obj_rec/Percept3d"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Percept percept
float32 x
float32 y
float32 z

================================================================================
MSG: obj_rec/Percept
uint8 id
uint16 u
uint16 v
uint16 width
uint16 height
uint16 area

"""
  __slots__ = ['percept','x','y','z']
  _slot_types = ['obj_rec/Percept','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       percept,x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Percept3d, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.percept is None:
        self.percept = obj_rec.msg.Percept()
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
    else:
      self.percept = obj_rec.msg.Percept()
      self.x = 0.
      self.y = 0.
      self.z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B5H3f.pack(_x.percept.id, _x.percept.u, _x.percept.v, _x.percept.width, _x.percept.height, _x.percept.area, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.percept is None:
        self.percept = obj_rec.msg.Percept()
      end = 0
      _x = self
      start = end
      end += 23
      (_x.percept.id, _x.percept.u, _x.percept.v, _x.percept.width, _x.percept.height, _x.percept.area, _x.x, _x.y, _x.z,) = _struct_B5H3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B5H3f.pack(_x.percept.id, _x.percept.u, _x.percept.v, _x.percept.width, _x.percept.height, _x.percept.area, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.percept is None:
        self.percept = obj_rec.msg.Percept()
      end = 0
      _x = self
      start = end
      end += 23
      (_x.percept.id, _x.percept.u, _x.percept.v, _x.percept.width, _x.percept.height, _x.percept.area, _x.x, _x.y, _x.z,) = _struct_B5H3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B5H3f = struct.Struct("<B5H3f")
